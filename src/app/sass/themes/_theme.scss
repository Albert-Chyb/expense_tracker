@use 'sass:color';
@use 'sass:list';
@use 'sass:map';

$dark-theme-colors: (
	'primary': hsl(40, 100%, 64%),
	'secondary': hsl(206, 100%, 68%),
	'success': hsl(131, 76%, 69%),
	'danger': hsl(16, 100%, 62%),
	'warning': hsl(60, 100%, 68%),
);

$light-theme-colors: (
	'primary': hsl(35, 96%, 49%),
	'secondary': hsl(206, 100%, 31%),
	'success': hsl(140, 100%, 27%),
	'danger': hsl(0, 100%, 38%),
	'warning': hsl(61, 100%, 40%),
);

@mixin shadow-elevation($dp) {
	@if $dp==0 {
		box-shadow: none;
	} @else if $dp==1 {
		box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.14),
			0 2px 1px -1px rgba(0, 0, 0, 0.12), 0 1px 3px 0 rgba(0, 0, 0, 0.2);
	} @else if $dp==2 {
		box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),
			0 3px 1px -2px rgba(0, 0, 0, 0.12), 0 1px 5px 0 rgba(0, 0, 0, 0.2);
	} @else if $dp==3 {
		box-shadow: 0 3px 4px 0 rgba(0, 0, 0, 0.14),
			0 3px 3px -2px rgba(0, 0, 0, 0.12), 0 1px 8px 0 rgba(0, 0, 0, 0.2);
	} @else if $dp==4 {
		box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14),
			0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.2);
	} @else if $dp==6 {
		box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14),
			0 1px 18px 0 rgba(0, 0, 0, 0.12), 0 3px 5px -1px rgba(0, 0, 0, 0.2);
	} @else if $dp==8 {
		box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14),
			0 3px 14px 2px rgba(0, 0, 0, 0.12), 0 5px 5px -3px rgba(0, 0, 0, 0.2);
	} @else if $dp==12 {
		box-shadow: 0 12px 17px 2px rgba(0, 0, 0, 0.14),
			0 5px 22px 4px rgba(0, 0, 0, 0.12), 0 7px 8px -4px rgba(0, 0, 0, 0.2);
	} @else if $dp==16 {
		box-shadow: 0 16px 24px 2px rgba(0, 0, 0, 0.14),
			0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.2);
	} @else if $dp==24 {
		box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14),
			0 9px 46px 8px rgba(0, 0, 0, 0.12), 0 11px 15px -7px rgba(0, 0, 0, 0.2);
	}
}

@mixin color-elevation($dp) {
	background-color: var(--bg-color-#{$dp});
}

@mixin elevation($dp) {
	:host-context(body.theme--dark) & {
		@include color-elevation($dp);
		transition: background-color 0.1s linear;
	}

	:host-context(body.theme--light) & {
		@include shadow-elevation($dp);
		transition: box-shadow 0.1s linear;
		background: var(--bg-color-0);
	}
}

@mixin generate-color-variables($theme, $name, $color) {
	$modification: 1;
	@if $theme == 'dark' {
		$modification: -1;
	}

	--color-#{$name}-hsl: #{color.hue($color)}, #{color.saturation($color)},
		#{color.lightness($color)};
	--color-#{$name}: #{$color};
	--color-#{$name}-0: #{$color};
	--color-#{$name}-1: #{color.adjust($color, $lightness: 5 * $modification)};
	--color-#{$name}-2: #{color.adjust($color, $lightness: 10 * $modification)};
}

@function get-theme-colors($theme) {
	@if ($theme == 'dark') {
		@return $dark-theme-colors;
	} @else if($theme == 'light') {
		@return $light-theme-colors;
	} @else {
		@error "Unknown theme !";
	}
}

@function get-colors-names() {
	@return map.keys($dark-theme-colors);
}

@function get-color($color-name, $variant) {
	$variants: '0', '1', '2', 'hsl';
	$colors: get-theme-colors('dark');

	@if not list.index($variants, $variant) {
		@error 'Unknown variant. Expected: #{list.zip($variants)}';
	}
	@if not map.get($colors, $color-name) {
		@error 'Unknown color.';
	}

	@return var(--color-#{$color-name}-#{$variant});
}

@mixin generate-color-palette($theme) {
	$colors: get-theme-colors($theme);
	$text: get-color('primary', 'hsl');

	@each $color-name, $color in $colors {
		@include generate-color-variables($theme, $color-name, $color);
	}
}
